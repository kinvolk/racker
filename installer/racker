#!/bin/bash

set -eu

IMAGE=${RACKER_IMAGE:-"quay.io/kinvolk/racker"}
VERSION=$(cat /opt/racker/RACKER_VERSION 2> /dev/null || true)
if [ "${VERSION}" = "" ]; then
  VERSION="latest"
fi

run_racker() {
  VERSION=${2:-"latest"}
  IMAGE="$1:$VERSION"

  echo "Running $IMAGE"

  sudo docker run --rm --privileged --pid host "$IMAGE"
}

pull_image() {
  VERSION=${2:-"latest"}
  IMAGE="$1:$VERSION"

  echo "Getting $IMAGE"

  sudo docker pull "$IMAGE"
}

pull_n_run_racker() {
  pull_image $1 $2
  run_racker $1 $2
}

usage() {
  declare -A args=(
    ["bootstrap ..."]="guided setup for Lokomotive Kubernetes"
    ["update"]="install updates for the current racker version"
    ["upgrade"]="migrate to a newer racker version"
    ["get VERSION"]="install a particular racker version"
    ["factory"]="preparation procedure to configure the hardware"
    ["version"]="print racker version"
    ["-h/--help"]="show usage"
  )

  echo "Usage: $0 COMMAND"
  echo "Commands:"
  for arg in "${!args[@]}"; do
    printf " %-20s: " "$arg"
    echo ${args["$arg"]}
  done
  exit 1
}

ARGS=$(getopt -n "$0" -o h -l help -- "$@")
eval set -- "$ARGS"

while true; do
  case "${1:-}" in
    -h|--help)
      usage
      ;;
    --)
      shift
      break
      ;;
    *)
      echo "error: Unrecognized option \"$1\"" >&2
      exit 1
      ;;
  esac
done

if [ $# -lt 1 ]; then
    usage
fi

if [ "$1" = "" ]; then
  usage
elif [ "$1" = update ]; then
  pull_n_run_racker $IMAGE $VERSION
elif [ "$1" = upgrade ]; then
  pull_n_run_racker $IMAGE "latest"
elif [ "$1" = get ]; then
  VERSION=${2:-$VERSION}
  pull_n_run_racker $IMAGE $VERSION
elif [ "$1" = version ]; then
  echo $VERSION
elif [ "$1" = factory ]; then
  # TODO: guide through /usr/share/oem/ metadata setup
  # Delete the version flag file to force an update on the first run
  sudo rm -f /opt/racker/RACKER_VERSION
elif [ "$1" = bootstrap ]; then
  if [ ! -f /opt/racker/RACKER_VERSION ]; then
    echo "Initial run, updating to the latest version"
    pull_n_run_racker $IMAGE $VERSION
    exec sh -c "racker bootstrap"
  fi
  # actually run the setup wizard here
  mkdir ~/lokomotive || { echo "a Lokomotive configuration already exists, remove the $HOME/lokomotive folder first"; exit 1 ; }
  cd ~/lokomotive

  LOCKSMITH_ENABLED=$(systemctl is-active --quiet locksmithd && echo true || echo false)
  if $LOCKSMITH_ENABLED; then
    # Stop locksmith to prevent a possible reboot while bootstrapping
    sudo systemctl stop locksmithd
  fi

  ret=0
  USE_QEMU=0 CONTROLLER_AMOUNT=3 CONTROLLER_TYPE=red CLUSTER_NAME=firebox /opt/racker/bootstrap/prepare.sh create || ret=$?

  # Start locksmith again, if it was enabled before
  if $LOCKSMITH_ENABLED; then
    sudo systemctl start locksmithd || true
  fi

  exit $ret
else
  echo "Error: Unrecognized option \"$1\"" >&2
  echo
  usage
fi
